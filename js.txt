JS
    -> The javascript is a lightweight client side scripting language and is supported by all the browsers. 
    -> It is single threaded, non blocking and asynchronous language.
    -> It is highly interactive when used with HTML.
    -> The heap memory is used for memory allocation and stack memory is used for storing the function calls.

Closures 
    -> The functions which are grouped together with reference of its surrounding state known as lexical environment are called closures.
    -> A closure is a function that has access to variables from its outer function even after the outer function has finished executing.
    -> It is useful in event handling, callbacks, etc.
    -> eg:- 
    function outerFunction() {
        let outerVar = 10;
        function innerFunction() {
            console.log(outerVar); // Inner function "closes over" outerVar
        }
        outerVar = 20; // now this will print 20 in innerfunction because the reference(lexical environment) is passed in closures
        return innerFunction;
    }
    const closure = outerFunction(); // The returned function forms a closure
    closure(); // Outputs: 10

Functions 
    -> There are four different types of functions in javascript:-
        - Named Function: The function whose name is declared at the time of definition is known as named function.
        - Anonymous Function: The function whose name is not declared at the time of definition is known as anonymous function.
        - Arrow Function: The arrow functions are type of anonymous function which 
        - Callback Function: The function which is passed as an arguement to another function is known as callback function.
        - Higher Order Function: The function in which one or more functions are passed as an argument or they can return functions is known as higher order functions. eg: map, filter, reduce, etc.

Hoisting
    -> It is concept where all the declarations appears to be on the top of the code before execution.
    -> The hoisting will occur only in var variable and before they are initialised.
    eg-
    console.log(a); // This is also hoisting and will print undefined
    hoisting(); // This is hoisting and this will run without any error.
    function hoisting() {
        let outerVar = 10;
        console.log(outerVar);
    }

    var a; // this is perfect hoisting
    var a = 9; // This is also hoisting but in above console of a it will print undefined because it is initialised here.
    console.log(a); // This will print 9

DOM
    -> The DOM stands for document object model. The dom represents the structure of webpage as objects and it is in the form of tree like structure with html tag as root node.

Asynchronous Programming
    -> The programming which does not affect the execution of another tasks and the other tasks do not have to wait until the execution of asynchronous task is known as asynchronous programming.
    -> There are three ways to handle the asynchronous tasks they are
        - Callbacks
        - Promises
        - Async / Await
    -> Callbacks:-
        -> The callbacks can lead to callback hell and were traditionally use to handle the asynchronous tasks. The callback hell are the nested callbacks which affects the readability and code maintainbility.
    -> Promises
        -> So the new way to handle the asynchronous programming is to write Promises.
        -> The promises are the solutions to callback hell. 
        -> Promise are the objects which represents the completion or failures of asynchronous operation.
        -> The promise object have two properties 
            - State (either fulfilled or pending)
            - result (what we want as output)
        -> If it is fulfilled then we can either resolve or reject the promise. 
        ->To handle the resolve and reject we use .then and .catch of promise.
    -> Async/Await
        -> The async/await are the easier way to handle the asynchronous tasks. 
        -> Rather than writing the whole code for promise it just provide a simple way to write promises.
        -> Async makes a function return a new Promise
        -> Await makes a function wait for the result of Promise

Local Storage and Session Storage
    -> The local storage and session storage are used to store key-value pairs in users browser. 
    -> The data inside the session storage will only persist until a session.
    -> The data inside the local storage will persist even after a session.

Event Loop
    -> The event loop is a concept which tells how the program is executed. 
    -> It consist of tasks queue, call stacks and web api.
    -> The task queue is a long queue of all the statements and function.
    -> The javascript takes one statment at a time in call stack and executes it.
    -> If there are nested functions then there is a stack of functions in call stack.
    -> If there is async functions then these fucntions will wait inside the web api untill it gets executed and the output it will be pushed into task queue and the event loop will take the result in call stack only when the task queue is empty and will do necessary operation.